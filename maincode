#include<bits/stdc++.h>
using namespace std;

struct date
{
	int dd, mm, yyyy;
	int hr, min; 
};

class appnt
{
	char client_name[25];
	date appdate;
	char server_name[25];
	int conf;
	
	public: char service[10];
			void getdata_cl();
			void getdata_se();
			int confirm();
			void service(int);
};


class client        
{
  private:
      string username;
      string client_name;
      string password;
  public:
      void getdata(string uname);
      void showdata();
      int login(string uname,string pass);
      string return_username();
      int search(string nm);
};
client cl;

void client::getdata(string uname)
{
    cout<<"\n Enter name: ";
	cin>>cl.client_name;
	cout<<"\n Enter password: ";
    cin>>cl.password;
    cl.username=uname;
}

void client::showdata()
{
    cout<<"show client details";
}

string client::return_username()
{
  return cl.username;
}

int client::login(string uname,string pass)     //for existing client login
{
    client c;
    fstream f;
    f.open("Client.dat",ios::in||ios::binary);     //ERROR HERE, +2 overloads on open
    if(!f)
    {
        cout<<"\n file could not be opened";
        exit(0); 
    }
    while(!f.eof())
    {
        f.read((char*)&c,sizeof(c));
        if(c.return_username()==uname)
        {
            if(c.password==pass)
            {
                cout<<"\nWelcome!\n";
            }
            return 0;
            //client_options();
        }
        else
        {
            cout<<"\nInvalid login or password!\n";
            return 1;
        }
    }
    f.close();
}
int client::search(string nm)   //for new client registration
{
    client c;
    fstream fin;
    fin.open("Client.dat",ios::in|ios::out|ios::binary|ios::app);
    while(!fin.eof())
    {
        fin.read((char*)&c,sizeof(c));
        if(c.return_username()==nm)
        {
            cout<<"Username already exists!\n";
            return 1;
            break;
        }
        else
        {
            c.getdata(nm);
            fin.write((char*)&c,sizeof(c));
            break;
        }
    }
    fin.close();
}

void client_options()       //after client logs in
{
    int b;
    cout<<"\n1. Book an appointment\n";
    cout<<"2. View your appointments\n";
    cout<<"3. Cancel appointment\n";
    cin>>b;
    switch(b)
    {
        case 1: //book();
                break;
        case 2: //view();
                break;
        case 3: //cancel();
                break;
        default:cout<<"Please enter a valid option!";
    }
}


void clregaccept()    //client registration
{
  string uname;
  int t;
  do
  {
        t=0;
        cout<<"\nEnter username: ";
        cin>>uname;
        t=cl.search(uname);
  }while(t==1);
}

void claccept()     //client login
{ 
    int t;
    string uname;
    string pass;  
    do
    {
        t=0;
        cout<<"\nEnter username: ";
        cin>>uname;
        cout<<"\nEnter password: ";
        t=cl.login(uname,pass);
    }while(t==1);
}



void client_page()  //if user chooses client
{
	int choice;
	cout<<"\n Enter 1 to register";
	cout<<"\n Existing user? Enter 2 to login";
	cin>>choice;
	switch(choice)
	{
		case 1: clregaccept();
            break;
		case 2: claccept();
            break;
        default:
            cout<<"Enter valid choice!";
            break;
        }		
}


int main()
{
	cout<<"\n\t\t <SITE NAME>";
	cout<<"\n\t\t 1. Client\n";
    cout<<"\n\t\t 2. Server\n";
    cout<<"\n\t\t 3. Admin\n";
	int a;
    cin>>a;
	switch(a)
	{
		case 1: client_page();
				break;
		case 2: //server_page();
				break;
		case 3: //admin_page();
				break;
		default:
      cout<<"Enter valid option!";
      break;
	}
	return 0;
}
